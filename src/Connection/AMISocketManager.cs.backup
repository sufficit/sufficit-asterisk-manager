using Microsoft.Extensions.Logging;
using Sufficit.Asterisk.IO;
using System;
using System.Collections.Generic;
using System.Net.Sockets;
using System.Threading;
using System.Threading.Tasks;

namespace Sufficit.Asterisk.Manager.Connection
{
    /// <summary>
    /// Manages the physical connection to the Asterisk server, including connecting,
    /// disconnecting, and automatic reconnection. It owns the socket and the ManagerReader.
    /// It does not know about authentication or AMI actions, only about the raw connection state.
    /// </summary>
    public class AMISocketManager : IAMISocketManager, IDisposable
    {
        private static readonly ILogger _logger = ManagerLogger.CreateLogger<AMISocketManager>();

        private readonly ManagerConnectionParameters _parameters;
        private ISocketConnection? _socket;
        private ManagerReader? _reader;
        private CancellationTokenSource? _readerCts;
        private readonly object _connectionLock = new object();

        public bool IsConnected => !IsDisposed && (_socket?.IsConnected ?? false);

        // Events for other components to listen to
        public event EventHandler<string>? OnConnectionIdentified;
        public event EventHandler<DisconnectEventArgs>? OnDisconnected;
        public event EventHandler<IDictionary<string, string>>? OnPacketReceived;

        public AMISocketManager(ManagerConnectionParameters parameters)
        {
            _parameters = parameters;
        }

        public async Task<bool> Connect (CancellationToken cancellationToken)
        {
            lock (_connectionLock)
            {
                if (IsConnected || IsDisposed) return IsConnected;
            }

            _logger.LogInformation("Attempting to connect to Asterisk server {Hostname}:{Port}...", _parameters.Hostname, _parameters.Port);
            try
            {
                var tcpClient = new TcpClient();

                // These settings will make the OS send a probe after 60 seconds of inactivity,
                // and then send 5 more probes every 5 seconds before considering the connection dead.
                tcpClient.Client.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.KeepAlive, true);
                
                // The following options might not be available on all OSes (e.g., older macOS)
                // but are safe to set on Linux and Windows.
                // tcpClient.Client.SetSocketOption(SocketOptionLevel.Tcp, SocketOptionName.TcpKeepAliveTime, 60);
                // tcpClient.Client.SetSocketOption(SocketOptionLevel.Tcp, SocketOptionName.TcpKeepAliveInterval, 5);
                // tcpClient.Client.SetSocketOption(SocketOptionLevel.Tcp, SocketOptionName.TcpKeepAliveRetryCount, 5);

                // Note: Consider a timeout mechanism for ConnectAsync
                await tcpClient.ConnectAsync(_parameters.Hostname, _parameters.Port);

                var options = new AGISocketExtendedOptions { 
                    Encoding = _parameters.SocketEncoding,
                    Start = false
                };

                _socket = new AISingleSocketHandler(_logger, options, tcpClient.Client);

                if (!_socket.IsConnected)
                    throw new NotConnectedException("connection established but ISocketConnection reports as not connected.");

                // Create the reader by passing the private handler methods as callbacks.
                _reader = new ManagerReader(HandlePacketReceived, HandleConnectionIdentified);

                _readerCts = new CancellationTokenSource();

                // Start and monitor the reader in the background
                _ = MonitorReaderTask(_reader.RunAsync(_socket, _readerCts.Token));

                _logger.LogInformation("Successfully connected to {Hostname}:{Port}.", _parameters.Hostname, _parameters.Port);
                return true;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to connect to {Hostname}:{Port}.", _parameters.Hostname, _parameters.Port);
                return false;
            }
        }

        /// <summary>
        /// Private handler that is called by the ManagerReader when a full packet is received.
        /// It then invokes the public event for external listeners.
        /// </summary>
        protected virtual void HandlePacketReceived(IDictionary<string, string> packet)
        {
            OnPacketReceived?.Invoke(this, packet);
        }

        /// <summary>
        /// Private handler that is called by the ManagerReader when the protocol banner is identified.
        /// It then invokes the public event for external listeners.
        /// </summary>
        private void HandleConnectionIdentified(string protocolIdentifier)
        {
            OnConnectionIdentified?.Invoke(this, protocolIdentifier);
        }

        private async Task MonitorReaderTask(Task readerTask)
        {
            await readerTask;
            _logger.LogWarning("ManagerReader has stopped. The connection is considered lost.");
            Disconnect("Reader stopped");
        }

        public virtual void Disconnect (string cause, bool isPermanent = false)
        {
            lock (_connectionLock)
            {
                if (!IsConnected) return;

                _logger.LogInformation("Disconnecting from Asterisk server. Cause: {Cause}", cause);
                _readerCts?.Cancel();
                _socket?.Close(cause);
                _socket = null;
                _reader = null;
            }

            var args = new DisconnectEventArgs() { Cause = cause, IsPermanent = isPermanent };
            OnDisconnectedTrigger(args);
        }   
        
        protected virtual void OnDisconnectedTrigger(DisconnectEventArgs args)
            => OnDisconnected?.Invoke(this, args);

        public void Write(string data)
        {
            lock (_connectionLock)
            {
                if (!IsConnected || _socket == null)
                    throw new NotConnectedException("Cannot write data, socket is not connected.");

                _logger.LogTrace("Writing to socket: \n{data}", data);
                _socket.Write(data);
            }
        }

        #region DISPOSABLE

        public bool IsDisposed { get; private set; }

        public virtual void Dispose()
        {
            if (IsDisposed) return;

            IsDisposed = true;
            Disconnect("Manager disposed", isPermanent: true);
            GC.SuppressFinalize(this);
        }

        #endregion
    }
}
